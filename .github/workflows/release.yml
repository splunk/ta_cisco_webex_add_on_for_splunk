name: Release from Changelog

on:
  push:
    paths:
      - "CHANGELOG.md"
    branches:
      - main

# Grants permission to create releases
permissions:
  contents: write

jobs:
  build:
    name: Bundle the App
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.9 ]
    outputs:
      artifact_name: ${{ steps.artifact.outputs.name }}
      ta_version: ${{ steps.app.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade splunk-packaging-toolkit splunk-add-on-ucc-framework

      - name: Get App Info
        id: app
        run: |
          MANIFEST="app.manifest"
          if [ -f "$MANIFEST" ]; then
            app_id=$(cat "$MANIFEST" | jq -r '.info.id.name')
            app_version=$(cat "$MANIFEST" | jq -r '.info.id.version')
            echo "name=${app_id}" >> $GITHUB_OUTPUT
            echo "version=${app_version}" >> $GITHUB_OUTPUT
          else
            echo "Files Not Found ❌ Please add 'package/app.manifest'"
            exit 1
          fi
        working-directory: ./package

      - name: Build and bundle TA
        run: |
          ucc-gen build --ta-version ${{ steps.app.outputs.version }}
          chmod -R +r output
          chmod -R go-w output
          ucc-gen package --path output/${{ steps.app.outputs.name }}
        shell: bash
      - id: artifact
        run: |
          echo "name=${{ steps.app.outputs.name }}-${{ steps.app.outputs.version }}-py${{ matrix.python-version }}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ${{ steps.app.outputs.name }}*.tar.gz

  release:
    name: Upload Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: dist
      - name: Fetch latest release info from CHANGELOG
        id: changelog
        uses: release-flow/keep-a-changelog-action@v3
        with:
          command: query
          version: latest
      - name: Validate version consistency
        env:
          VERSION: ${{ steps.changelog.outputs.version }}
          TA_VERSION: ${{ needs.build.outputs.ta_version }}
        run: |
          if [ "$VERSION" != "$TA_VERSION" ]; then
            echo "❌ Add-On and Changelog version mismatch. Did you forget to bump the Add-On version?"
            exit 1
          fi
      - name: Create GitHub release
        env:
          VERSION: v${{ steps.changelog.outputs.version }}
          RELEASE_NOTES: ${{ steps.changelog.outputs.release-notes }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_RELEASE=$(gh release view --json tagName --jq '.tagName')
          if [ "$VERSION" == "$LATEST_RELEASE" ]; then
            echo "Versions match nothing to do!"
          else
            echo "Releasing $VERSION"
            gh release create $VERSION \
              --title "$VERSION" \
              --notes "$RELEASE_NOTES" \
              dist/*.tar.gz
          fi
