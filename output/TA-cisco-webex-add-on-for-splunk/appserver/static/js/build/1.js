(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{229:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(57),a=n.n(r),o=n(0),i=n.n(o),l=n(2),s=n.n(l),c=Object(o.createContext)({rowData:{},setRowData:function(){}}),u=function(e){var t=e.children,n=Object(o.useState)({}),r=a()(n,2),l=r[0],s=r[1],u=Object(o.useState)(""),d=a()(u,2),p=d[0],f=d[1],h=Object(o.useState)("all"),m=a()(h,2),v=m[0],g=m[1],b=Object(o.useState)(10),y=a()(b,2),O=y[0],E=y[1],j=Object(o.useState)(0),k=a()(j,2),w=k[0],C=k[1];return i.a.createElement(c.Provider,{value:{rowData:l,setRowData:s,searchText:p,setSearchText:f,searchType:v,setSearchType:g,pageSize:O,setPageSize:E,currentPage:w,setCurrentPage:C}},t)};u.propTypes={children:s.a.oneOfType([s.a.arrayOf(s.a.node),s.a.node]).isRequired},t.b=c},230:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return o})),n.d(t,"b",(function(){return i}));var r="clone",a="create",o="edit",i="config"},231:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(226),a=n.n(r),o=n(68),i=n.n(o),l=n(117),s=n(116),c=n(36);function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p=function(e){var t=e.serviceName,n=e.endpointUrl,r=e.params,a=e.body,o=e.cancelToken,u=e.customHeaders,p=void 0===u?{}:u,f=e.method,h=void 0===f?"get":f,m=e.handleError,v=void 0!==m&&m,g=e.callbackOnError,b=void 0===g?function(){}:g,y=t?Object(c.b)(t):n,O={app:l.app,owner:"nobody"},E={"X-Splunk-Form-Key":l.CSRFToken,"X-Requested-With":"XMLHttpRequest","Content-Type":"application/json"},j=Object.assign(E,p),k=Object(s.createRESTURL)(y,O),w={output_mode:"json"};r&&(w=d(d({},w),r));var C={params:w,method:h,url:k,credentials:"include",headers:j,cancelToken:o};return"post"===h&&(C.data=a),v?i()(C).catch((function(e){var t="";return i.a.isCancel(e)||(t=e.response?"Error response received from server: ".concat(e.response.data.messages[0].text):e.request?"No response received while making request to ".concat(y):"Error making ".concat(h," request to ").concat(y),Object(c.c)(t,"error"),b(e)),Promise.reject(e)})):i()(C)}},251:function(e,t,n){"use strict";n.d(t,"b",(function(){return u})),n.d(t,"a",(function(){return d}));var r,a,o,i=n(13),l=n.n(i),s=n(1),c=n(4),u=s.default.div.attrs({className:"pageTitle"})(r||(r=l()(["\n    &.pageTitle {\n        font-size: ",";\n        margin-bottom: 20px;\n    }\n"])),c.variables.fontSizeXXLarge),d=s.default.div.attrs({className:"pageSubtitle"})(a||(a=l()(["\n    &.pageSubtitle {\n        font-size: ",";\n        margin-bottom: 10px;\n    }\n"])),c.variables.fontSize);s.default.div(o||(o=l()(["\n    .table-caption-inner {\n        text-align: left;\n    }\n"])))},255:function(e,t,n){"use strict";var r=n(5);t.a=function(){return new URLSearchParams(Object(r.e)().search)}},256:function(e,t,n){"use strict";var r,a=n(25),o=n.n(a),i=n(26),l=n.n(i),s=n(106),c=n.n(s),u=n(28),d=n.n(u),p=n(29),f=n.n(p),h=n(18),m=n.n(h),v=n(226),g=n.n(v),b=n(13),y=n.n(b),O=n(0),E=n.n(O),j=n(2),k=n.n(j),w=n(27),C=n.n(w),R=n(22),S=n.n(R),x=n(1),N=n(61),P=n.n(N),M=n(7),_=n(230),T=n(259);function F(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m()(e);if(t){var a=m()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return f()(this,n)}}var D=Object(x.default)(S.a)(r||(r=y()(["\n    width: 800px;\n"]))),V=function(e){d()(n,e);var t=F(n);function n(e){var r;return o()(this,n),r=t.call(this,e),g()(c()(r),"handleRequestClose",(function(){r.props.handleRequestClose()})),g()(c()(r),"handleSubmit",(function(){r.form.current.handleSubmit()&&r.handleRequestClose()})),g()(c()(r),"handleFormSubmit",(function(e,t){r.setState({isSubmititng:e}),t&&r.handleRequestClose()})),r.form=E.a.createRef(),r.state={isSubmititng:!1},e.mode===_.c?r.buttonText=Object(M._)("Add"):e.mode===_.a?r.buttonText=Object(M._)("Save"):e.mode===_.d?r.buttonText=Object(M._)("Update"):r.buttonText=Object(M._)("Submit"),r}return l()(n,[{key:"render",value:function(){return E.a.createElement(D,{open:this.props.open},E.a.createElement(S.a.Header,{title:this.props.formLabel,onRequestClose:this.handleRequestClose}),E.a.createElement(S.a.Body,null,E.a.createElement(T.a,{ref:this.form,page:this.props.page,serviceName:this.props.serviceName,mode:this.props.mode,stanzaName:this.props.stanzaName,handleFormSubmit:this.handleFormSubmit})),E.a.createElement(S.a.Footer,null,E.a.createElement(C.a,{appearance:"secondary",onClick:this.handleRequestClose,label:Object(M._)("Cancel"),disabled:this.state.isSubmititng}),E.a.createElement(C.a,{className:"saveBtn",appearance:"primary",label:this.state.isSubmititng?E.a.createElement(P.a,null):this.buttonText,onClick:this.handleSubmit,disabled:this.state.isSubmititng})))}}]),n}(O.Component);V.propTypes={page:k.a.string,open:k.a.bool,handleRequestClose:k.a.func,serviceName:k.a.string,mode:k.a.string,stanzaName:k.a.string,formLabel:k.a.string},t.a=V},259:function(e,t,n){"use strict";var r,a=n(367),o=n.n(a),i=n(368),l=n.n(i),s=n(25),c=n.n(s),u=n(26),d=n.n(u),p=n(106),f=n.n(p),h=n(28),m=n.n(h),v=n(29),g=n.n(v),b=n(18),y=n.n(b),O=n(226),E=n.n(O),j=n(13),k=n.n(j),w=n(372),C=n.n(w),R=n(0),S=n.n(R),x=n(2),N=n.n(x),P=n(252),M=n.n(P),_=n(412),T=n(374),F=n.n(T),D=n(76),V=n.n(D),q=n(1),A=n(376),z=n.n(A),I=n(107),L=n.n(I),B=q.default.span(r||(r=k()(["\n    color: ",";\n"])),(function(e){return e.color}));function H(e){return S.a.createElement("div",{"data-test":"msg-markdown"},(t=e.text,"link"===e.markdownType?t=S.a.createElement(L.a,{to:e.link},e.text):"hybrid"===e.markdownType?(t=function(e,t){for(var n=[],r=0;r<e.length;r+=1){var a=t(e[r]);n=n.concat(a)}return n}(t.split(e.token),(function(t){return[t,S.a.createElement(L.a,{key:t,to:e.link},e.linkText)]}))).pop():"text"===e.markdownType&&(t=S.a.createElement(B,{color:e.color},e.text)),t));var t}H.propTypes={text:N.a.string,link:N.a.string,color:N.a.string,markdownType:N.a.string,token:N.a.string,linkText:N.a.string};var U=S.a.memo(H);function $(e){var t=e.controlOptions,n=t.text,r=t.link;return S.a.createElement(L.a,{to:r,openInNewContext:!0},n)}$.propTypes={controlOptions:N.a.object};var W,K=$,Z=n(234),G=n.n(Z);function X(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var J=Object(q.default)(G.a)(W||(W=k()(["\n    width: 320px !important;\n"]))),Q=function(e){m()(n,e);var t=X(n);function n(){var e;c()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(t,n){var r=n.value;e.props.handleChange(e.props.field,r)})),e}return d()(n,[{key:"render",value:function(){var e,t;return S.a.createElement(J,{inline:!0,error:this.props.error,placeholder:null===(e=this.props)||void 0===e||null===(t=e.controlOptions)||void 0===t?void 0:t.placeholder,className:this.props.field,disabled:this.props.disabled,value:null===this.props.value||void 0===this.props.value?"":this.props.value.toString(),onChange:this.handleChange,type:this.props.encrypted?"password":"text"})}}]),n}(R.Component);Q.propTypes={value:N.a.oneOfType([N.a.string,N.a.number]),handleChange:N.a.func.isRequired,field:N.a.string,error:N.a.bool,controlOptions:N.a.object,encrypted:N.a.bool,disabled:N.a.bool};var Y,ee,te=Q,ne=n(57),re=n.n(ne),ae=n(285),oe=n.n(ae),ie=n(286),le=n.n(ie),se=n(396),ce=n.n(se),ue=n(27),de=n.n(ue),pe=n(126),fe=n.n(pe),he=n(7),me=n(68),ve=n.n(me),ge=n(231),be=n(36),ye=Object(q.default)(le.a)(Y||(Y=k()(["\n    width: 320px !important;\n"]))),Oe=q.default.div(ee||(ee=k()(["\n    div:first-child {\n        width: 320px !important;\n    }\n"])));function Ee(e){var t=e.field,n=e.disabled,r=void 0!==n&&n,a=e.error,o=void 0!==a&&a,i=e.controlOptions,l=e.dependencyValues,s=oe()(e,["field","disabled","error","controlOptions","dependencyValues"]),c=i.endpointUrl,u=i.denyList,d=i.allowList,p=i.placeholder,f=void 0===p?Object(he._)("Select a value"):p,h=i.dependencies,m=i.createSearchChoice,v=i.referenceName,g=i.disableSearch,b=i.labelField,y=i.autoCompleteFields,O=i.isClearable;function E(e,n){s.handleChange(t,n.value)}var j=m?ce.a.Option:le.a.Option,k=m?ce.a.Heading:le.a.Heading;function w(e){var t=[];return e.forEach((function(e){e.value&&e.label&&t.push(S.a.createElement(j,{label:e.label,value:e.value,key:e.value})),e.children&&e.label&&(t.push(S.a.createElement(k,{key:e.label},e.label)),e.children.forEach((function(e){t.push(S.a.createElement(j,{label:e.label,value:e.value,key:e.value}))})))})),t}var C=Object(R.useState)(!1),x=re()(C,2),N=x[0],P=x[1],M=Object(R.useState)(null),_=re()(M,2),T=_[0],F=_[1];Object(R.useEffect)((function(){if(c||v||!y){var e=!0,t=ve.a.CancelToken.source(),n={CancelToken:t.token,handleError:!0};return v?n.serviceName=v:c&&(n.endpointUrl=c),l&&(n.params=l),h&&!l||(P(!0),Object(ge.a)(n).then((function(t){e&&(F(w(Object(be.a)(t.data.entry,b,d,u))),P(!1))})).catch((function(){e&&P(!1)}))),function(){t.cancel("Operation canceled."),e=!1}}F(w(y))}),[l]);var D=!!N||r,V=N?Object(he._)("Loading"):f;return S.a.createElement(S.a.Fragment,null,m?S.a.createElement(Oe,{className:"dropdownBox"},S.a.createElement(ce.a,{value:null===e.value?"":e.value,name:t,error:o,placeholder:V,disabled:D,onChange:E,inline:!0},T&&T.length>0&&T)):S.a.createElement(S.a.Fragment,null,S.a.createElement(ye,{className:"dropdownBox","data-test-loading":N,value:e.value,name:t,error:o,placeholder:V,disabled:D,onChange:E,filter:!g,inline:!0},T&&T.length>0&&T),!0!==O?S.a.createElement(de.a,{"data-test":"clear",appearance:"secondary",icon:S.a.createElement(fe.a,null),onClick:function(){return s.handleChange(t,"")}}):null))}Ee.propTypes={disabled:N.a.bool,value:N.a.string,error:N.a.bool,handleChange:N.a.func.isRequired,field:N.a.string,dependencyValues:N.a.object,controlOptions:N.a.shape({autoCompleteFields:N.a.array,endpointUrl:N.a.string,denyList:N.a.string,allowList:N.a.string,placeholder:N.a.string,dependencies:N.a.array,createSearchChoice:N.a.bool,referenceName:N.a.string,disableSearch:N.a.bool,labelField:N.a.string,isClearable:N.a.bool})};var je,ke=Ee,we=n(397),Ce=n.n(we),Re=n(8),Se=Object(q.default)(Ce.a)(je||(je=k()(["\n    width: 320px !important;\n"])));function xe(e){var t=e.field,n=e.disabled,r=void 0!==n&&n,a=e.error,o=void 0!==a&&a,i=e.value,l=e.controlOptions,s=e.dependencyValues,c=oe()(e,["field","disabled","error","value","controlOptions","dependencyValues"]),u=l.endpointUrl,d=l.denyList,p=l.allowList,f=l.items,h=l.dependencies,m=l.referenceName,v=l.placeholder,g=l.createSearchChoice,b=l.labelField,y=l.delimiter,O=void 0===y?",":y;function E(e){return e.map((function(e){return S.a.createElement(Ce.a.Option,{label:e.label,value:e.value,key:e.value})}))}var j=Object(R.useState)(!1),k=re()(j,2),w=k[0],C=k[1],x=Object(R.useState)(null),N=re()(x,2),P=N[0],M=N[1];Object(R.useEffect)((function(){if(u||!f){var e=!0,t=ve.a.CancelToken.source(),n={CancelToken:t.token,handleError:!0};return m?n.serviceName=m:u&&(n.endpointUrl=u),s&&(n.params=s),h&&!s||(C(!0),Object(ge.a)(n).then((function(t){e&&(M(E(Object(be.a)(t.data.entry,b,p,d))),C(!1))})).catch((function(){e&&C(!1)}))),function(){t.cancel("Operation canceled."),e=!1}}M(E(f))}),[s]);var _=!!w||r,T=w?Object(Re.a)(115):v,F=i?i.split(O):[];return S.a.createElement(Se,{values:F,error:o,name:t,placeholder:T,disabled:_,allowNewValues:g,onChange:function(e,n){var r=n.values;c.handleChange(t,r.join(O))},inline:!0},P&&P.length>0&&P)}xe.propTypes={disabled:N.a.bool,value:N.a.string,error:N.a.bool,handleChange:N.a.func.isRequired,field:N.a.string,dependencyValues:N.a.object,controlOptions:N.a.shape({delimiter:N.a.string,placeholder:N.a.string,createSearchChoice:N.a.bool,referenceName:N.a.string,dependencies:N.a.array,endpointUrl:N.a.string,denyList:N.a.string,allowList:N.a.string,labelField:N.a.string,items:N.a.arrayOf(N.a.shape({label:N.a.string.isRequired,value:N.a.string.isRequired}))})};var Ne=xe,Pe=n(237),Me=n.n(Pe);function _e(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var Te=function(e){m()(n,e);var t=_e(n);function n(){var e;c()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(){e.props.value&&!Object(be.e)(e.props.value)?e.props.handleChange(e.props.field,0):e.props.handleChange(e.props.field,1)})),e}return d()(n,[{key:"render",value:function(){return S.a.createElement(Me.a,{key:this.props.field,value:this.props.field,onClick:this.handleChange,disabled:this.props.disabled,selected:!(!this.props.value||Object(be.e)(this.props.value)),appearance:"checkbox"})}}]),n}(R.Component);Te.propTypes={value:N.a.oneOfType([N.a.bool,N.a.number,N.a.string]),handleChange:N.a.func.isRequired,field:N.a.string,disabled:N.a.bool};var Fe,De=Te,Ve=n(399),qe=n.n(Ve);function Ae(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var ze=Object(q.default)(qe.a)(Fe||(Fe=k()(["\n    width: 320px;\n"]))),Ie=function(e){m()(n,e);var t=Ae(n);function n(){var e;c()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(t,n){var r=n.value;e.props.handleChange(e.props.field,r)})),e}return d()(n,[{key:"render",value:function(){return S.a.createElement(ze,{inline:!0,onChange:this.handleChange,value:this.props.value,key:this.props.field},this.props.controlOptions.items.map((function(e){return S.a.createElement(qe.a.Option,{key:e.value,value:e.value,label:e.label})})))}}]),n}(R.Component);Ie.propTypes={value:N.a.string,handleChange:N.a.func.isRequired,field:N.a.string,controlOptions:N.a.object};var Le=Ie,Be=n(400),He=n.n(Be);function Ue(e){var t=e.controlOptions.defaultValue;return S.a.createElement(He.a,null,t)}Ue.propTypes={controlOptions:N.a.object};var $e=Ue,We=n(30);function Ke(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var Ze=function(e){m()(n,e);var t=Ke(n);function n(e){var r;return c()(this,n),r=t.call(this,e),E()(f()(r),"loadCustomControl",(function(e,t,n){return new Promise((function(r){"external"===t?import("".concat(Object(We.a)(),"/custom/").concat(e,".js")).then((function(e){var t=e.default;r(t)})):require(["app/".concat(n,"/js/build/custom/").concat(e)],(function(e){r(e)}))}))})),E()(f()(r),"setValue",(function(e){r.props.handleChange(r.props.field,e)})),r.state={loading:!0},r.shouldRender=!0,r}return d()(n,[{key:"componentDidMount",value:function(){var e=this,t=Object(be.d)(),n=t.meta.name;this.loadCustomControl(this.props.controlOptions.src,this.props.controlOptions.type,n).then((function(n){var r=new n(t,e.el,e.props.data,e.setValue,e.props.utilCustomFunctions);r.render(),"function"==typeof r.validation&&e.props.addCustomValidator(e.props.field,r.validation),e.setState({loading:!1})}))}},{key:"shouldComponentUpdate",value:function(e,t){return!(t.loading||!this.shouldRender)&&(this.shouldRender=!1,!0)}},{key:"render",value:function(){var e=this;return S.a.createElement(S.a.Fragment,null,this.state.loading&&Object(he._)("Loading..."),S.a.createElement("span",{ref:function(t){e.el=t},style:{visibility:this.state.loading?"hidden":"visible"}}))}}]),n}(R.Component);Ze.propTypes={data:N.a.object,field:N.a.string,handleChange:N.a.func,controlOptions:N.a.object,addCustomValidator:N.a.func,utilCustomFunctions:N.a.object};var Ge,Xe,Je={text:te,singleSelect:ke,helpLink:K,multipleSelect:Ne,checkbox:De,radio:Le,placeholder:$e,custom:Ze};function Qe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ye(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qe(Object(n),!0).forEach((function(t){E()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var tt=q.default.div(Ge||(Ge=k()(["\n    margin-left: 30px;\n"]))),nt=Object(q.default)(z.a).attrs((function(e){return{"data-name":e.dataName}}))(Xe||(Xe=k()(["\n    width: 100%;\n    max-width: 100%;\n\n    > * {\n        &:first-child {\n            width: 240px !important;\n        }\n        &:nth-child(3) {\n            margin-left: 270px !important;\n            width: 320px;\n        }\n    }\n"]))),rt=function(e){m()(n,e);var t=et(n);function n(e){var r,a;return c()(this,n),a=t.call(this,e),E()(f()(a),"isString",(function(e){return!!("string"==typeof e||e instanceof String)})),a.controlType=a.isString(e.entity.type)?Je[e.entity.type]:null,a.options=a.props.entity.options,a.props.entity.required||Object.prototype.hasOwnProperty.call(a.props.entity,"oauth_field")||null!==(r=a.options)&&void 0!==r&&r.placeholder||(a.options=Ye(Ye({},a.options),{},{placeholder:"optional"})),a}return d()(n,[{key:"render",value:function(){var e,t=this.props.entity,n=t.field,r=t.type,a=t.label,o=t.tooltip,i=t.help,l=t.encrypted,s=void 0!==l&&l,c=this.props.utilityFuncts,u=c.handleChange,d=c.addCustomValidator,p=c.utilCustomFunctions,f=this.props.markdownMessage||{},h=f.text,m=f.link,v=f.color,g=f.markdownType,b=f.token,y=f.linkText;if("custom"===this.props.entity.type){var O={value:this.props.value,mode:this.props.mode,serviceName:this.props.serviceName};e=this.controlType?S.a.createElement(this.controlType,{data:O,field:n,handleChange:u,addCustomValidator:d,utilCustomFunctions:p,controlOptions:this.options}):"No View Found for ".concat(r," type")}else e=this.controlType?S.a.createElement(this.controlType,{handleChange:u,value:this.props.value,field:n,controlOptions:this.options,error:this.props.error,disabled:this.props.disabled,encrypted:s,dependencyValues:this.props.dependencyValues}):"No View Found for ".concat(r," type");var E=S.a.createElement(S.a.Fragment,null,S.a.createElement(U,{text:h||"",link:m||"",color:v||"",markdownType:g||"",token:b||"",linkText:y||""}),i);return this.props.display&&S.a.createElement(nt,{label:a,help:E,tooltip:o,error:this.props.error,dataName:n},S.a.createElement(tt,null,e))}}]),n}(S.a.PureComponent);rt.propTypes={mode:N.a.string,utilityFuncts:N.a.object,value:N.a.any,display:N.a.bool,error:N.a.bool,entity:N.a.object,disabled:N.a.bool,markdownMessage:N.a.object,serviceName:N.a.string,dependencyValues:N.a.object};var at=rt,ot={url:{regex:/^(?:(?:https?|ftp|opc\.tcp):\/\/)?(?:\S+(?::\S*)?@)?(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?_?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))?)(?::\d{2,5})?(?:\/[^\s]*)?$/,inputValueType:Object(Re.a)(111)},email:{regex:/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,inputValueType:Object(Re.a)(112)},ipv4:{regex:/^(?:(?:[0-1]?\d{1,2}|2[0-4]\d|25[0-5])(?:\.|$)){4}$/,inputValueType:Object(Re.a)(113)},date:{regex:/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,inputValueType:Object(Re.a)(114)}},it=n(88);var lt,st,ct=function(){function e(t){c()(this,e),E()(this,"checkIsFieldHasInput",(function(e){return void 0!==e&&""!==e&&null!==e})),this.entities=t,this.isName=t.find((function(e){return"name"===e.field}))}return d()(e,[{key:"RequiredValidator",value:function(e,t,n){return!this.checkIsFieldHasInput(n)&&{errorField:e,errorMsg:Object(Re.a)(6,[t])}}},{key:"StringValidator",value:function(e,t,n,r){var a=Object(it.d)(n.minLength,n.maxLength).error;return a?{errorField:e,errorMsg:a}:this.checkIsFieldHasInput(r)&&r.length>n.maxLength?{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(18,[t,n.maxLength])}:!!(this.checkIsFieldHasInput(r)&&r.length<n.minLength)&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(17,[t,n.minLength])}}},{key:"RegexValidator",value:function(e,t,n,r){var a=Object(it.c)(n.pattern),o=a.error,i=a.result;return o?{errorField:e,errorMsg:o}:!(!this.checkIsFieldHasInput(r)||i.test(r))&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(15,[t,n.pattern])}}},{key:"PreDefinedRegexValidator",value:function(e,t,n,r,a,o){var i=Object(it.c)(a),l=i.error,s=i.result;return l?{errorField:e,errorMsg:l}:!(!this.checkIsFieldHasInput(r)||s.test(r))&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(19,[t,o])}}},{key:"NumberValidator",value:function(e,t,n,r){var a=Object(it.b)(n.range).error;if(a)return{errorField:e,errorMsg:a};var o=Number(r);return Number.isNaN(o)?{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(16,[t])}:!!(this.checkIsFieldHasInput(r)&&o>n.range[1]||o<n.range[0])&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(8,[t,n.range[0],n.range[1]])}}},{key:"doValidation",value:function(t){if(this.isName){var n=t.name,r=this.isName.label;if(void 0===n||""===n||null==n)return{errorField:"name",errorMsg:Object(Re.a)(0,[r])};if(!("string"==typeof n||n instanceof String))return{errorField:"name",errorMsg:Object(Re.a)(1,[r])};if(n.startsWith("_")||"."===n||".."===n||"default"===n.toLowerCase())return{errorField:"name",errorMsg:Object(Re.a)(3,[r])};if(["*","\\","[","]","(",")","?",":"].some((function(e){return n.indexOf(e)>-1})))return{errorField:"name",errorMsg:Object(Re.a)(3,[r])};if(n.length>=1024)return{errorField:"name",errorMsg:Object(Re.a)(22,[r])}}var a,o,i;for(o=0;o<this.entities.length;o+=1){if(!0===this.entities[o].required&&(a=this.RequiredValidator(this.entities[o].field,this.entities[o].label,t[this.entities[o].field])))return a;if(""!==t[this.entities[o].field]&&null!==t[this.entities[o].field]&&this.entities[o].validators)for(i=0;i<this.entities[o].validators.length;i+=1)switch(this.entities[o].validators[i].type){case"string":if(a=this.StringValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"regex":if(a=this.RegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"number":if(a=this.NumberValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"url":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.url.regex,ot.url.inputValueType))return a;break;case"date":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.date.regex,ot.date.inputValueType))return a;break;case"email":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.email.regex,ot.email.inputValueType))return a;break;case"ipv4":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.ipv4.regex,ot.ipv4.inputValueType))return a;break;case"custom":if(a=e.CustomValidator(this.entities[o].validators[i].validatorFunc,this.entities[o].field,t[this.entities[o].field]))return a}}return!1}}],[{key:"CustomValidator",value:function(e,t,n){var r=e(t,n);return"string"==typeof r&&{errorField:t,errorMsg:r}}}]),e}(),ut=n(230),dt=n(39),pt=n(229);function ft(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ht(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ft(Object(n),!0).forEach((function(t){E()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ft(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function mt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var vt=Object(q.default)(F.a)(lt||(lt=k()(["\n    span {\n        button {\n            background-color: transparent;\n            font-size: 16px;\n            margin: 10px 0;\n\n            &:hover:not([disabled]),\n            &:focus:not([disabled]),\n            &:active:not([disabled]) {\n                background-color: transparent;\n                box-shadow: none;\n            }\n        }\n    }\n\n    .collapsible-element {\n        padding-top: 15px;\n    }\n"]))),gt=q.default.div(st||(st=k()(["\n    padding: 6px 10px;\n    background-color: #f2f4f5;\n"]))),bt=function(e){m()(n,e);var t=mt(n);function n(e,r){var a;c()(this,n),a=t.call(this,e),E()(f()(a),"updateEntitiesForGroup",(function(e){a.groups&&a.groups.length&&a.groups.forEach((function(t){var n;t&&null!==(n=t.fields)&&void 0!==n&&n.length&&t.fields.forEach((function(t){var n=e.entity.findIndex((function(e){return e.field===t}));if(-1!==n){var r=JSON.parse(JSON.stringify(e.entity[n]));r.isGrouping=!0,a.entities.splice(n,1,r)}}))}))})),E()(f()(a),"handleSubmit",(function(){if((a.clearErrorMsg(),a.props.handleFormSubmit(!0,!1),a.datadict={},Object.keys(a.state.data).forEach((function(e){a.datadict[e]=a.state.data[e].value})),a.hook&&"function"==typeof a.hook.onSave)&&!a.hook.onSave(a.datadict))return void a.props.handleFormSubmit(!1,!1);var e=function(){var e;if((Object.keys(a.state.data).forEach((function(e){a.datadict[e]=a.state.data[e].value})),[ut.c,ut.a].includes(a.props.mode))&&Boolean(Object.values(a.context.rowData).find((function(e){return Object.keys(e).find((function(e){return e===a.datadict.name}))})))){var t=a.entities.findIndex((function(e){return"name"===e.field}));return a.setErrorFieldMsg("name",Object(Re.a)(2,[a.entities[t].label,a.datadict.name])),void a.props.handleFormSubmit(!1,!1)}if(a.isAuthVal){var n=[];Object.keys(a.authMap).forEach((function(e){e===a.datadict.auth_type&&(n=[].concat(l()(n),l()(a.authMap[e])))})),e=a.entities.map((function(e){return n.includes(e.field)?ht(ht({},e),{},{required:!0}):e}))}else e=a.entities;var r=new ct(e).doValidation(a.datadict);if(r?a.setErrorFieldMsg(r.errorField,r.errorMsg):a.options&&a.options.saveValidator&&(r=function(e,t){var n=Object(it.a)(e),r=n.error,a=n.result;if(r)return{errorMsg:r};var o=a(t);return"string"==typeof o?{errorMsg:o}:void 0}(a.options.saveValidator,a.datadict))&&a.setErrorMsg(r.errorMsg),r)a.props.handleFormSubmit(!1,!1);else if(a.isOAuth&&(a.isSingleOauth||a.isAuthVal&&"oauth"===a.datadict.auth_type)){var i="?response_type=code&client_id=".concat(a.datadict.client_id,"&redirect_uri=").concat(a.datadict.redirect_url),s=null!=a.isoauthState&&a.isoauthState;"true"!==s&&!0!==s||(a.state_enabled=!0,a.oauth_state=Object(_.a)().replace(/-/g,""),i="".concat(i,"&state=").concat(a.oauth_state));var c="https://".concat(a.datadict.endpoint).concat(a.oauthConf.authCodeEndpoint).concat(i);o()(C.a.mark((function e(){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a.isCalled=!1,a.isError=!1,a.isResponse=!1,a.childWin=window.open(c,"".concat(a.appName," OAuth"),"width=".concat(a.oauthConf.popupWidth,", height=").concat(a.oauthConf.popupHeight)),window.getMessage=function(e){a.isCalled=!0,a.handleOauthToken(e)},e.next=7,a.waitForAuthentication(a.oauthConf.authTimeout);case 7:if(a.isCalled||!a.childWin.closed){e.next=11;break}return a.setErrorMsg("Authentication process interrupted. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 11:if(a.isCalled){e.next=15;break}return a.setErrorMsg("Request time out while authenticating. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 15:return e.next=17,a.waitForBackendResponse(30);case 17:if(a.isResponse||a.isError){e.next=22;break}return a.isError=!0,a.setErrorMsg("Request time out while getting accesstoken. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 22:return e.abrupt("return",!0);case 23:case"end":return e.stop()}}),e)})))().then((function(){a.isError?a.props.handleFormSubmit(!1,!1):a.saveData()}))}else a.saveData()};a.hook&&"function"==typeof a.hook.onSave&&void 0!==a.onSavePromise?a.onSavePromise.then((function(){e()})):e()})),E()(f()(a),"saveData",(function(){var e=new URLSearchParams;Object.keys(a.datadict).forEach((function(t){null!=a.datadict[t]&&e.append(t,a.datadict[t])})),a.isOAuth&&e.delete("redirect_url"),a.props.mode===ut.d&&e.delete("name"),Object(ge.a)({serviceName:a.endpoint,body:e,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!1}).then((function(e){var t,n=null==e||null===(t=e.data)||void 0===t?void 0:t.entry[0];if(a.props.mode!==ut.b){var r={};r[n.name]=ht(ht({},n.content),{},{id:n.id,name:n.name,serviceName:a.props.serviceName}),a.context.setRowData(M()(a.context.rowData,E()({},a.props.serviceName,{$merge:r})))}a.hook&&"function"==typeof a.hook.onSaveSuccess&&a.hook.onSaveSuccess(),a.props.mode===ut.d?Object(be.c)('Updated "'.concat(n.name,'"'),"success"):a.props.mode===ut.b?Object(be.c)('Updated "'.concat(a.mode_config_title?a.mode_config_title:n.name,'"'),"success"):Object(be.c)('Created "'.concat(n.name,'"'),"success"),a.props.handleFormSubmit(!1,!0)})).catch((function(e){var t=Object(Re.b)(e);a.setState({errorMsg:t}),a.hook&&"function"==typeof a.hook.onSaveFail&&a.hook.onSaveFail(),a.props.handleFormSubmit(!1,!1)}))})),E()(f()(a),"handleChange",(function(e,t){var n={};if("auth_type"===e&&Object.keys(a.authMap).forEach((function(e){e===t?a.authMap[e].forEach((function(e){n[e]={display:{$set:!0}}})):a.authMap[e].forEach((function(e){n[e]={display:{$set:!1}}}))})),a.dependencyMap.has(e)){var r=a.dependencyMap.get(e);Object.keys(r).forEach((function(o){var i={},l=!0;r[o].forEach((function(n){var r=!!a.entities.find((function(e){return e.field===n})).required,o=n===e?t:a.state.data[n].value;r&&!o?(l=!1,i[n]=null):i[n]=o})),l&&(n[o]={dependencyValues:{$set:i},value:{$set:null}})}))}n[e]={value:{$set:t}};var o=M()(a.state,{data:n}),i=a.clearAllErrorMsg(o);a.setState(i),a.hookDeferred&&a.hookDeferred.then((function(){"function"==typeof a.hook.onChange&&a.hook.onChange(e,t,i)}))})),E()(f()(a),"addCustomValidator",(function(e,t){var n=a.entities.findIndex((function(t){return t.field===e})),r=[{type:"custom",validatorFunc:t}];a.entities[n].validators=r})),E()(f()(a),"setErrorFieldMsg",(function(e,t){a.setState((function(n){var r=M()(n,{data:E()({},e,{error:{$set:!0}})});return r.errorMsg=t,r}))})),E()(f()(a),"setErrorField",(function(e){a.setState((function(t){return M()(t,{data:E()({},e,{error:{$set:!0}})})}))})),E()(f()(a),"clearErrorMsg",(function(){a.state.errorMsg&&a.setState((function(e){return ht(ht({},e),{},{errorMsg:""})}))})),E()(f()(a),"setErrorMsg",(function(e){a.setState((function(t){return ht(ht({},t),{},{errorMsg:e})}))})),E()(f()(a),"clearAllErrorMsg",(function(e){var t=ht({},e||a.state);t.errorMsg="",t.warningMsg="";var n=ht({},e?e.data:a.state.data),r={};return Object.keys(n).forEach((function(e){n[e].error?r[e]=ht(ht({},n[e]),{},{error:!1}):r[e]=n[e]})),t.data=r,e?t:null})),E()(f()(a),"generateErrorMessage",(function(){return a.state.errorMsg?S.a.createElement(V.a,{appearance:"fill",type:"error"},a.state.errorMsg):null})),E()(f()(a),"generateWarningMessage",(function(){return a.state.warningMsg?S.a.createElement(V.a,{appearance:"fill",type:"warning"},a.state.warningMsg):null})),E()(f()(a),"loadHook",(function(e,t,n){return new Promise((function(r){"external"===t?import("".concat(Object(We.a)(),"/custom/").concat(e,".js")).then((function(e){var t=e.default;a.hook=new t(n,a.props.serviceName,a.state,a.props.mode,a.util),r(t)})):require(["app/".concat(a.appName,"/js/build/custom/").concat(e)],(function(e){a.hook=new e(n,a.props.serviceName,a.state,a.props.mode,a.util),r(e)}))}))})),E()(f()(a),"handleOauthToken",(function(e){if(!e||e&&e.error||void 0===e.code)return a.setErrorMsg("Error occurred while trying to authenticate. Please try Again."),a.isError=!0,a.isResponse=!0,!1;var t=e.state;if(!0===a.state_enabled&&a.oauth_state!==t)return a.setErrorMsg("Response not received from the expected sender. Please try again."),a.isError=!0,a.isResponse=!0,!1;var n=decodeURIComponent(e.code),r={method:"POST",url:"https://".concat(a.datadict.endpoint).concat(a.oauthConf.accessTokenEndpoint),grant_type:"authorization_code",client_id:a.datadict.client_id,client_secret:a.datadict.client_secret,code:n,redirect_uri:a.datadict.redirect_url},o=new URLSearchParams;Object.keys(r).forEach((function(e){o.append(e,r[e])}));var i="".concat(a.appName,"_oauth/oauth");Object(ge.a)({endpointUrl:i,body:o,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!1}).then((function(e){if(void 0===e.data.entry[0].content.error){var t=e.data.entry[0].content.access_token,n=e.data.entry[0].content.instance_url,r=e.data.entry[0].content.refresh_token;return a.datadict.instance_url=n,a.datadict.refresh_token=r,a.datadict.access_token=t,a.isResponse=!0,!0}return a.setErrorMsg(e.data.entry[0].content.error),a.isError=!0,a.isResponse=!0,!1})).catch((function(){return a.setErrorMsg("Error occurred while trying to authenticate. Please try Again."),a.isError=!0,a.isResponse=!0,!1}))})),E()(f()(a),"waitForAuthentication",function(){var e=o()(C.a.mark((function e(t){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t-=1,!0!==a.isCalled){e.next=3;break}return e.abrupt("return",!0);case 3:if(0!==t&&!a.childWin.closed){e.next=6;break}return a.isError=!0,e.abrupt("return",!1);case 6:return e.next=8,a.sleep(a.waitForAuthentication,t);case 8:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"waitForBackendResponse",function(){var e=o()(C.a.mark((function e(t){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t+=1,!0!==a.isResponse){e.next=3;break}return e.abrupt("return",!0);case 3:if(60!==t){e.next=5;break}return e.abrupt("return",!1);case 5:return e.next=7,a.sleep(a.waitForBackendResponse,t);case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"sleep",function(){var e=o()(C.a.mark((function e(t){var n,r,o,i=arguments;return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.timeout(1e3);case 2:for(n=i.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=i[o];return e.abrupt("return",t.apply(void 0,r));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"timeout",(function(e){return new Promise((function(t){return setTimeout(t,e)}))})),E()(f()(a),"renderGroupElements",(function(){var e=null;return a.groups&&a.groups.length&&(e=a.groups.map((function(e){var t,n=(null===(t=e.fields)||void 0===t?void 0:t.length)&&e.fields.map((function(e){return a.entities.map((function(t){if(t.field===e){var n=a.state.data[t.field];return S.a.createElement(at,{key:t.field,utilityFuncts:a.utilControlWrapper,value:n.value,display:n.display,error:n.error,entity:t,serviceName:a.props.serviceName,mode:a.props.mode,disabled:n.disabled,markdownMessage:n.markdownMessage,dependencyValues:n.dependencyValues||null})}return null}))}));return e.options.isExpandable?S.a.createElement(vt,{title:e.label},S.a.createElement("div",{className:"collapsible-element"},n)):S.a.createElement(S.a.Fragment,null,S.a.createElement(gt,null,e.label),S.a.createElement("div",null,n))}))),e})),a.flag=!0,a.state={},a.currentInput={};var i=Object(be.d)();a.appName=i.meta.name,a.endpoint=e.mode===ut.d||e.mode===ut.b?"".concat(a.props.serviceName,"/").concat(encodeURIComponent(a.props.stanzaName)):"".concat(a.props.serviceName),a.util={setState:function(e){a.onSavePromise=new Promise((function(t){a.setState((function(t){return e(t)}),t)}))},setErrorFieldMsg:a.setErrorFieldMsg,clearAllErrorMsg:a.clearAllErrorMsg,setErrorMsg:a.setErrorMsg},a.utilControlWrapper={handleChange:a.handleChange,addCustomValidator:a.addCustomValidator,utilCustomFunctions:a.util},e.page===dt.b?i.pages.inputs.services.forEach((function(t){t.name===e.serviceName&&(a.groups=t.groups,a.entities=t.entity,a.updateEntitiesForGroup(t),a.options=t.options,t.hook&&(a.hookDeferred=a.loadHook(t.hook.src,t.hook.type,i)),e.mode!==ut.d&&e.mode!==ut.a||(a.currentInput=r.rowData[e.serviceName][e.stanzaName]))})):i.pages.configuration.tabs.forEach((function(t){(t.table?t.name===e.serviceName:t.name===e.stanzaName)&&(a.entities=t.entity,a.options=t.options,t.hook&&(a.hookDeferred=a.loadHook(t.hook.src,t.hook.type,i)),!t.table||e.mode!==ut.d&&e.mode!==ut.a?e.mode===ut.b?(a.currentInput=e.currentServiceState,a.mode_config_title=t.title):a.currentInput=r.rowData[e.serviceName]:a.currentInput=r.rowData[e.serviceName][e.stanzaName])})),a.dependencyMap=new Map,a.isOAuth=!1,a.isAuthVal=!1,a.authMap={};var s={},u=[];return a.entities.forEach((function(t){if("oauth"===t.type){if(a.isOAuth=!0,e.page===dt.a&&"account"===e.serviceName){var n,r,o,i=null==t||null===(n=t.options)||void 0===n?void 0:n.auth_type;if(a.isoauthState=void 0!==(null==t||null===(r=t.options)||void 0===r?void 0:r.oauth_state_enabled)?null==t||null===(o=t.options)||void 0===o?void 0:o.oauth_state_enabled:null,i.length>1){a.isAuthVal=!0;var l={};l.value=e.mode===ut.c?i[0]:a.currentInput.auth_type,l.display=!0,l.error=!1,l.disabled=!1,s.auth_type=l;var c={field:"auth_type",type:"singleSelect",label:"Auth Type"},d={basic:"Basic Authentication",oauth:"OAuth 2.0 Authentication"};c.options={},c.options.isClearable=!0,c.options.autoCompleteFields=i.map((function(e){return{label:d[e],value:e}})),u.push(c)}else a.isSingleOauth=i.includes("oauth");if(i.forEach((function(n){var r=[],o=null==t?void 0:t.options[n];o&&(o.forEach((function(t){var o={};if(e.mode===ut.c)o.value=void 0!==(null==t?void 0:t.defaultValue)?t.defaultValue:null;else{var i=void 0!==(null==t?void 0:t.encrypted)&&(null==t?void 0:t.encrypted);o.value=i?"":a.currentInput[t.field]}o.display=void 0===s.auth_type||n===s.auth_type.value,o.error=!1,o.disabled=!1,s[t.field]=o,t.required=!a.isAuthVal,t.type=void 0!==(null==t?void 0:t.type)?t.type:"text","redirect_url"===t.field&&(o.value=window.location.href.split("?")[0].replace("configuration","".concat(a.appName.toLowerCase(),"_redirect")),o.disabled=!0),u.push(t),r.push(t.field)})),a.authMap[n]=r)})),i.includes("oauth")){var p={};p.popupWidth=t.options.oauth_popup_width?t.options.oauth_popup_width:600,p.popupHeight=t.options.oauth_popup_height?t.options.oauth_popup_height:600,p.authTimeout=t.options.oauth_timeout?t.options.oauth_timeout:180,p.authCodeEndpoint=t.options.auth_code_endpoint?t.options.auth_code_endpoint:null,p.accessTokenEndpoint=t.options.access_token_endpoint?t.options.access_token_endpoint:null,a.oauthConf=p}}}else{var f,h,m={};if(t.encrypted=void 0!==t.encrypted&&t.encrypted,e.mode===ut.c)m.value=void 0!==t.defaultValue?t.defaultValue:null,m.display=void 0===(null==t||null===(h=t.options)||void 0===h?void 0:h.display)||t.options.display,m.error=!1,m.disabled=!1,s[t.field]=m;else if(e.mode===ut.d){var v,g;m.value=void 0!==a.currentInput[t.field]?a.currentInput[t.field]:null,m.value=t.encrypted?"":m.value,m.display=void 0===(null==t||null===(v=t.options)||void 0===v?void 0:v.display)||t.options.display,m.error=!1,m.disabled=!1,"name"===t.field?m.disabled=!0:void 0!==(null==t||null===(g=t.options)||void 0===g?void 0:g.disableonEdit)&&(m.disabled=t.options.disableonEdit),s[t.field]=m}else if(e.mode===ut.a){var b;m.value="name"===t.field||t.encrypted?"":a.currentInput[t.field],m.display=void 0===(null==t||null===(b=t.options)||void 0===b?void 0:b.display)||t.options.display,m.error=!1,m.disabled=!1,s[t.field]=m}else{if(e.mode!==ut.b)throw new Error("Invalid mode :",e.mode);var y,O;t.defaultValue=void 0!==t.defaultValue?t.defaultValue:null,m.value=void 0!==a.currentInput[t.field]?a.currentInput[t.field]:t.defaultValue,m.value=t.encrypted?"":m.value,m.display=void 0===(null==t||null===(y=t.options)||void 0===y?void 0:y.display)||t.options.display,m.error=!1,m.disabled=!1,"name"===t.field?m.disabled=!0:void 0!==(null==t||null===(O=t.options)||void 0===O?void 0:O.disableonEdit)&&(m.disabled=t.options.disableonEdit),s[t.field]=m}var j=null===(f=t.options)||void 0===f?void 0:f.dependencies;j&&j.forEach((function(e){var n=a.dependencyMap.get(e);n?n[t.field]=j:a.dependencyMap.set(e,E()({},t.field,j))})),u.push(t)}})),a.entities=u,a.state={data:s,errorMsg:"",warningMsg:""},a.hookDeferred&&a.hookDeferred.then((function(){if("function"==typeof a.hook.onCreate)try{a.hook.onCreate()}catch(e){console.error(e)}})),a}return d()(n,[{key:"render",value:function(){var e=this;return this.flag&&(this.hookDeferred&&this.hookDeferred.then((function(){if("function"==typeof e.hook.onRender)try{e.hook.onRender()}catch(e){console.error(e)}})),this.props.mode===ut.d&&this.hookDeferred&&this.hookDeferred.then((function(){if("function"==typeof e.hook.onEditLoad)try{e.hook.onEditLoad()}catch(e){console.error(e)}})),this.flag=!1),S.a.createElement("div",null,S.a.createElement("form",{style:this.props.mode===ut.b?{marginTop:"25px"}:{}},this.generateWarningMessage(),this.generateErrorMessage(),this.renderGroupElements(),this.entities.map((function(t){if(t.isGrouping)return null;var n=e.state.data[t.field];return n.placeholder&&(t=ht(ht({},t),{},{options:ht(ht({},t.options),{},{placeholder:n.placeholder})})),S.a.createElement(at,{key:t.field,utilityFuncts:e.utilControlWrapper,value:n.value,display:n.display,error:n.error,entity:t,serviceName:e.props.serviceName,mode:e.props.mode,disabled:n.disabled,markdownMessage:n.markdownMessage,dependencyValues:n.dependencyValues||null})}))))}}]),n}(R.PureComponent);E()(bt,"contextType",pt.b),bt.propTypes={page:N.a.string,serviceName:N.a.string,stanzaName:N.a.string,currentServiceState:N.a.object,mode:N.a.string,handleFormSubmit:N.a.func};t.a=bt},280:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return a}));var r="page",a="modal"},287:function(e,t,n){"use strict";var r=n(226),a=n.n(r),o=n(57),i=n.n(o),l=n(0),s=n.n(l),c=n(252),u=n.n(c),d=n(68),p=n.n(d),f=n(2),h=n.n(f),m=n(62),v=n(231),g=n(36),b=n(281),y=n.n(b),O=n(253),E=n.n(O),j=n(7),k=n(255),w=n(230),C=n(39),R=n(13),S=n.n(R),x=n(363),N=n.n(x),P=n(1),M=n(25),_=n.n(M),T=n(26),F=n.n(T),D=n(106),V=n.n(D),q=n(28),A=n.n(q),z=n(29),I=n.n(z),L=n(18),B=n.n(L),H=n(30);function U(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=B()(e);if(t){var a=B()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return I()(this,n)}}var $=function(e){A()(n,e);var t=U(n);function n(e){var r;return _()(this,n),r=t.call(this,e),a()(V()(r),"loadCustomControl",(function(){return new Promise((function(e){if("external"===r.props.type)import("".concat(Object(H.a)(),"/custom/").concat(r.props.fileName,".js")).then((function(t){var n=t.default;e(n)}));else{var t=Object(g.d)().meta.name;require(["app/".concat(t,"/js/build/custom/").concat(r.props.fileName)],(function(t){return e(t)}))}}))})),r.state={loading:!0},r.shouldRender=!0,r}return F()(n,[{key:"componentDidMount",value:function(){var e=this,t=Object(g.d)();this.setState({loading:!0}),this.loadCustomControl().then((function(n){e.customControl=new n(t,e.props.serviceName,e.el,e.props.row,e.props.field),e.setState({loading:!1})}))}},{key:"shouldComponentUpdate",value:function(e,t){return this.props.row!==e.row||!(t.loading||!this.shouldRender)&&(this.shouldRender=!1,!0)}},{key:"render",value:function(){var e=this;if(!this.state.loading)try{this.customControl.render(this.props.row,this.props.field)}catch(e){console.error(e)}return s.a.createElement(s.a.Fragment,null,this.state.loading&&Object(j._)("Loading..."),s.a.createElement("span",{ref:function(t){e.el=t},style:{visibility:this.state.loading?"hidden":"visible"}}))}}]),n}(l.Component);$.propTypes={serviceName:h.a.string.isRequired,row:h.a.object.isRequired,field:h.a.string,fileName:h.a.string.isRequired,type:h.a.string};var W,K=$,Z=Object(P.default)(E.a.Cell)(W||(W=S()(["\n    border-top: none;\n"])));function G(e,t,n){var r=Object(g.d)().pages.inputs.table.customRow;return s.a.createElement(E.a.Row,{key:"".concat(t.id,"-expansion")},s.a.createElement(Z,{colSpan:e},r&&r.src?s.a.createElement(s.a.Fragment,null,s.a.createElement(K,{serviceName:t.serviceName,row:t,fileName:r.src})):s.a.createElement(N.a,{termWidth:250},function(e,t){var n=[];return null!=t&&t.length&&t.forEach((function(t){var r=Object(j._)(t.label);t.field in e&&""!==e[t.field]&&(n.push(s.a.createElement(N.a.Term,{key:t.field},r)),n.push(s.a.createElement(N.a.Description,{key:"".concat(t.field,"_decr")},t.mapping&&t.mapping[e[t.field]]?t.mapping[e[t.field]]:String(e[t.field]))))})),n}(t,n))))}var X,J,Q=n(280),Y=n(61),ee=n.n(Y),te=n(237),ne=n.n(te),re=n(283),ae=n.n(re),oe=n(254),ie=n.n(oe),le=n(364),se=n.n(le),ce=n(365),ue=n.n(ce),de=n(366),pe=n.n(de),fe=Object(P.default)(E.a.Cell)(X||(X=S()(["\n    padding: 2px;\n"]))),he=P.default.div(J||(J=S()(["\n    display: flex;\n\n    .toggle_switch {\n        padding: 0;\n        margin-right: 10px;\n    }\n"])));function me(e){var t=e.row,n=e.columns,r=e.headerMapping,a=e.handleToggleActionClick,o=e.handleEditActionClick,i=e.handleCloneActionClick,c=e.handleDeleteActionClick,u=Object(l.useCallback)((function(e){return s.a.createElement(fe,{"data-column":"actions",key:e.id},s.a.createElement(ae.a,null,s.a.createElement(ie.a,{content:Object(j._)("Edit")},s.a.createElement(m.a,{appearance:"flat",icon:s.a.createElement(se.a,{screenReaderText:null,size:1}),onClick:function(){return o(e)},className:"editBtn"})),s.a.createElement(ie.a,{content:Object(j._)("Clone")},s.a.createElement(m.a,{appearance:"flat",icon:s.a.createElement(ue.a,{screenReaderText:null,size:1}),onClick:function(){return i(e)},className:"cloneBtn"})),s.a.createElement(ie.a,{content:Object(j._)("Delete")},s.a.createElement(m.a,{appearance:"destructive",icon:s.a.createElement(pe.a,{screenReaderText:null,size:1}),onClick:function(){return c(e)},className:"deleteBtn"}))))}),[o,i,c]),d="Enabled";return t.__toggleShowSpinner?d=s.a.createElement(ee.a,null):t.disabled&&(d=null!=r&&r.disabled&&r.disabled[t.disabled]?r.disabled[t.disabled]:"Disabled"),s.a.createElement(s.a.Fragment,null,s.a.createElement(E.a.Row,y()({key:t.id},e),n&&n.length&&n.map((function(e){var n="";if(e.customCell&&e.customCell.src)n=s.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},function(e,n){return s.a.createElement(K,{serviceName:t.serviceName,field:n.field,row:e,fileName:n.customCell.src,type:n.customCell.type})}(t,e));else if("disabled"===e.field){var o,i;n=s.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},s.a.createElement(he,null,s.a.createElement(ne.a,{key:t.name,value:t.disabled,onClick:function(){return a(t)},selected:!t.disabled,disabled:t.__toggleShowSpinner,appearance:"toggle",className:"toggle_switch",selectedLabel:Object(j._)(null!=r&&null!==(o=r.disabled)&&void 0!==o&&o.false?r.disabled.false:"Enabled"),unselectedLabel:Object(j._)(null!=r&&null!==(i=r.disabled)&&void 0!==i&&i.true?r.disabled.true:"Disabled")}),s.a.createElement("span",{"data-test":"status"},d)))}else n="actions"===e.field?u(t):s.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},r[e.field]&&Object.prototype.hasOwnProperty.call(r[e.field],t[e.field])?r[e.field][t[e.field]]:t[e.field]);return n}))))}me.propTypes={row:h.a.any,columns:h.a.array,headerMapping:h.a.object,handleToggleActionClick:h.a.func,handleEditActionClick:h.a.func,handleCloneActionClick:h.a.func,handleDeleteActionClick:h.a.func};var ve,ge=s.a.memo(me),be=n(256),ye=n(27),Oe=n.n(ye),Ee=n(22),je=n.n(Ee),ke=n(76),we=n.n(ke),Ce=n(229),Re=n(8);function Se(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Se(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Se(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=B()(e);if(t){var a=B()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return I()(this,n)}}var Pe=Object(P.default)(je.a)(ve||(ve=S()(["\n    width: 800px;\n"]))),Me=function(e){A()(n,e);var t=Ne(n);function n(e){var r;return _()(this,n),r=t.call(this,e),a()(V()(r),"handleRequestClose",(function(){r.state.ErrorMsg="",r.props.handleRequestClose()})),a()(V()(r),"handleDelete",(function(){r.setState((function(e){return xe(xe({},e),{},{isDeleting:!0,ErrorMsg:""})}),(function(){Object(v.a)({serviceName:"".concat(r.props.serviceName,"/").concat(encodeURIComponent(r.props.stanzaName)),customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"delete",handleError:!1}).catch((function(e){var t=Object(Re.b)(e);return r.setState({ErrorMsg:t,isDeleting:!1}),Promise.reject(e)})).then((function(){r.context.setRowData(u()(r.context.rowData,a()({},r.props.serviceName,{$unset:[r.props.stanzaName]}))),r.setState({isDeleting:!1}),r.handleRequestClose(),Object(g.c)('Deleted "'.concat(r.props.stanzaName,'"'),"success")}))}))})),a()(V()(r),"generateErrorMessage",(function(){return r.state.ErrorMsg?s.a.createElement("div",null,s.a.createElement(we.a,{appearance:"fill",type:"error"},r.state.ErrorMsg)):null})),r.state={isDeleting:!1,ErrorMsg:""},r}return F()(n,[{key:"render",value:function(){var e;return e=this.props.page===C.b?Object(Re.a)(103,[this.props.stanzaName]):Object(Re.a)(102,[this.props.stanzaName]),s.a.createElement(Pe,{open:this.props.open},s.a.createElement(je.a.Header,{title:Object(Re.a)(101),onRequestClose:this.handleRequestClose}),s.a.createElement(je.a.Body,{className:"deletePrompt"},this.generateErrorMessage(),s.a.createElement("p",null,e)),s.a.createElement(je.a.Footer,null,s.a.createElement(Oe.a,{appearance:"secondary",onClick:this.handleRequestClose,label:Object(j._)("Cancel"),disabled:this.state.isDeleting}),s.a.createElement(Oe.a,{appearance:"primary",label:this.state.isDeleting?s.a.createElement(ee.a,null):Object(j._)("Delete"),onClick:this.handleDelete,disabled:this.state.isDeleting})))}}]),n}(l.Component);a()(Me,"contextType",Ce.b),Me.propTypes={page:h.a.string.isRequired,open:h.a.bool,handleRequestClose:h.a.func,serviceName:h.a.string,stanzaName:h.a.string};var _e=Me;function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function De(e){var t=e.page,n=e.serviceName,r=e.data,a=e.handleToggleActionClick,o=e.handleOpenPageStyleDialog,c=e.handleSort,u=e.sortDir,d=e.sortKey,p=Object(g.d)(),f=Object(l.useState)({open:!1}),h=i()(f,2),v=h[0],b=h[1],O=Object(l.useState)({open:!1}),R=i()(O,2),S=R[0],x=R[1],N=Object(l.useContext)(Ce.b).rowData,P=t===C.b?p.pages.inputs.table:p.pages.configuration.tabs.filter((function(e){return e.name===n}))[0].table,M=P.moreInfo,_=P.header,T=P.header,F={};_.forEach((function(e){F[e.field]=e.mapping}));var D={};t===C.b&&p.pages.inputs.services.forEach((function(e){D[e.name]=e.style===Q.b?Q.b:Q.a}));var V=Object(k.a)();Object(l.useEffect)((function(){if(V&&(V.get("tab")===n||void 0===n))if(V.get("record")&&!v.open){var e=Object.keys(N).find((function(e){return void 0!==N[e][V.get("record")]}));if(e){var t=N[e][V.get("record")];b(Fe(Fe({},v),{},{open:!0,serviceName:t.serviceName,stanzaName:t.name,mode:w.d}))}}else!V.get("record")&&v.open&&b(Fe(Fe({},v),{},{open:!1}))}),[]);var q,A=function(){b(Fe(Fe({},v),{},{open:!1}))},z=Object(l.useCallback)((function(e){"page"===D[e.serviceName]?o(e,w.d):b(Fe(Fe({},v),{},{open:!0,serviceName:e.serviceName,stanzaName:e.name,mode:w.d}))}),[v]),I=function(){x(Fe(Fe({},S),{},{open:!1}))},L=Object(l.useCallback)((function(e){"page"===D[e.serviceName]?o(e,w.a):b(Fe(Fe({},v),{},{open:!0,serviceName:e.serviceName,stanzaName:e.name,mode:w.a}))}),[v]),B=Object(l.useCallback)((function(e){x(Fe(Fe({},S),{},{open:!0,stanzaName:e.name,serviceName:e.serviceName}))}),[S]),H=(q=[],T&&T.length&&T.forEach((function(e){q.push(Fe(Fe({},e),{},{sortKey:e.field||null}))})),q.push({label:"Actions",field:"actions",sortKey:""}),q),U=Object(l.useCallback)((function(){return s.a.createElement(E.a.Head,null,H&&H.length&&H.map((function(e){return s.a.createElement(E.a.HeadCell,{key:e.field,onSort:e.sortKey?c:null,sortKey:e.sortKey?e.sortKey:null,sortDir:e.sortKey&&e.sortKey===d?u:"none"},e.label)})))}),[H,c,u,d]);return s.a.createElement(s.a.Fragment,null,H&&H.length&&s.a.createElement(E.a,y()({stripeRows:!0},M?{rowExpansion:"single"}:{}),U(),s.a.createElement(E.a.Body,null,r&&r.length&&r.map((function(e){return s.a.createElement(ge,y()({key:e.id,row:e,columns:H,headerMapping:F,handleEditActionClick:z,handleCloneActionClick:L,handleDeleteActionClick:B,handleToggleActionClick:a},M?{expansionRow:G(H.length,e,M)}:{}))})))),r.length?null:s.a.createElement(m.b,null,"No records found"),function(){if(v.open){var e,n,r,a,o;if("inputs"===t)e=null===(r=(null===(n=p.pages)||void 0===n?void 0:n.inputs).services.find((function(e){return e.name===v.serviceName})))||void 0===r?void 0:r.title;else e=null===(o=(null===(a=p.pages)||void 0===a?void 0:a.configuration).tabs.find((function(e){return e.name===v.serviceName})))||void 0===o?void 0:o.title;return s.a.createElement(be.a,{page:t,open:v.open,handleRequestClose:A,serviceName:v.serviceName,stanzaName:v.stanzaName,mode:v.mode,formLabel:v.mode===w.a?Object(j._)("Clone ")+e:Object(j._)("Update ")+e})}return null}(),s.a.createElement(_e,{page:t,open:S.open,handleRequestClose:I,serviceName:S.serviceName,stanzaName:S.stanzaName}))}De.propTypes={page:h.a.string.isRequired,serviceName:h.a.string,data:h.a.array.isRequired,handleToggleActionClick:h.a.func,handleOpenPageStyleDialog:h.a.func,handleSort:h.a.func,sortDir:h.a.string,sortKey:h.a.string};var Ve=Object(l.memo)(De),qe=n(286),Ae=n.n(qe),ze=n(401),Ie=n.n(ze),Le=n(234),Be=n.n(Le);function He(e){var t,n,r;return s.a.createElement(Be.a,{appearance:"search",placeholder:"filter",onChange:(t=e.handleChange,n=200,function(){for(var e=arguments.length,a=new Array(e),o=0;o<e;o++)a[o]=arguments[o];var i=function(){r=null,t.apply(void 0,a)};clearTimeout(r),r=setTimeout(i,n)})})}He.propTypes={handleChange:h.a.func};var Ue,$e,We=He,Ke=P.default.div(Ue||(Ue=S()(["\n    display: flex;\n    justify-content: space-between;\n    border-top: 1px solid #ccc;\n    padding-top: 5px;\n    margin-bottom: 5px;\n"]))),Ze=P.default.div($e||($e=S()(["\n    max-width: 300px;\n    width: 100%;\n"])));function Ge(e){var t=e.page,n=e.services,r=e.totalElement,a=e.handleRequestModalOpen,o=Object(l.useContext)(Ce.b),i=o.pageSize,c=o.currentPage,u=o.setCurrentPage,d=o.setPageSize,p=o.searchType,f=o.setSearchType,h=o.setSearchText,v=t===C.b?"Input":"Item";return s.a.createElement(Ke,null,s.a.createElement("div",null,s.a.createElement("span",{className:"inputNumber"},r,r>1?Object(j._)(" ".concat(v,"s")):Object(j._)(" ".concat(v))),t===C.b?s.a.createElement(m.c,null,s.a.createElement(Ae.a,{value:i,className:"dropdownPage",onChange:function(e,t){var n=t.value;u(0),d(n)}},s.a.createElement(Ae.a.Option,{key:"10",label:Object(j._)("10 Per Page"),value:10}),s.a.createElement(Ae.a.Option,{key:"25",label:Object(j._)("25 Per Page"),value:25}),s.a.createElement(Ae.a.Option,{key:"50",label:Object(j._)("50 Per Page"),value:50})),function(){if(n.length<2)return null;var e=[];return(e=n.map((function(e){return s.a.createElement(Ae.a.Option,{key:e.name,label:e.title,value:e.name})}))).unshift(s.a.createElement(Ae.a.Option,{key:"all",label:Object(j._)("All"),value:"all"})),s.a.createElement(Ae.a,{value:p,className:"dropdownInput",onChange:function(e,t){var n=t.value;u(0),f(n)}},e)}()):null),s.a.createElement(Ze,null,s.a.createElement(We,{handleChange:function(e,t){var n=t.value;u(0),h(n)}})),s.a.createElement("div",null,s.a.createElement(Ie.a,{onChange:function(e,t){var n=t.page;return u(n-1)},current:c+1,alwaysShowLastPageLink:!0,totalPages:Math.ceil(r/i)}),t===C.b?null:s.a.createElement(Oe.a,{label:Object(j._)("Add"),appearance:"primary",onClick:a})))}Ge.propTypes={page:h.a.string,services:h.a.array,totalElement:h.a.number,handleRequestModalOpen:h.a.func};var Xe=Ge;function Je(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Je(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Je(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ye(e){var t=e.page,n=e.serviceName,r=e.handleRequestModalOpen,o=e.handleOpenPageStyleDialog,c=Object(l.useState)("name"),d=i()(c,2),f=d[0],h=d[1],b=Object(l.useState)("asc"),y=i()(b,2),O=y[0],E=y[1],j=Object(l.useState)(!0),k=i()(j,2),w=k[0],R=k[1],S=Object(l.useState)(null),x=i()(S,2),N=x[0],P=x[1],M=Object(l.useContext)(Ce.b),_=M.rowData,T=M.setRowData,F=M.pageSize,D=M.currentPage,V=M.searchText,q=M.searchType,A=Object(g.d)(),z=t===C.b?A.pages.inputs.table:A.pages.configuration.tabs.filter((function(e){return e.name===n}))[0].table,I=z.header,L=z.moreInfo,B=t===C.b?A.pages.inputs.services:A.pages.configuration.tabs.filter((function(e){return e.name===n})),H=function(){var e=[];B.forEach((function(t){e.push(Object(v.a)({serviceName:t.name}))})),p.a.all(e).catch((function(e){var n="",r="";return e.response?(n="Error received from server: ".concat(e.response.data.messages[0].text),r=t===C.b?"ERR0001":"ERR0002"):e.request?(n="No response received while making request to ".concat(t," services"),r="ERR0003"):(n="Error making request to ".concat(t," services"),r="ERR0004"),e.uccErrorCode=r,Object(g.c)(n),R(!1),P(e),Promise.reject(e)})).then((function(e){var t,n;t=e.map((function(e){return e.data.entry})),n={},B.forEach((function(e,r){if(e&&e.name&&t){var a={};t[r].forEach((function(t){a[t.name]=Qe(Qe({},t.content),{},{id:t.id,name:t.name,serviceName:e.name})})),n[e.name]=a}})),T(n),R(!1)}))};Object(l.useEffect)((function(){H()}),[]);var U=function(e){var t=[],n=[];return I.forEach((function(e){n.push(e.field)})),null==L||L.forEach((function(e){n.push(e.field)})),Object.keys(e).forEach((function(r){var a=!1;Object.keys(e[r]).forEach((function(o){n.includes(o)&&"string"==typeof e[r][o]&&e[r][o].toLowerCase().includes(V.toLowerCase().trim())&&!a&&(t.push(e[r]),a=!0)}))})),t};if(null!=N&&N.uccErrorCode)throw N;if(w)return s.a.createElement(m.d,null);var $=function(){var e=[];"all"===q?Object.keys(_).forEach((function(t){var n=[];n=V&&V.length?U(_[t]):Object.keys(_[t]).map((function(e){return _[t][e]})),e=e.concat(n)})):e=U(_[q]);var t=e.sort((function(e,t){return"asc"===O?e[f]>t[f]?1:-1:"desc"===O?t[f]>e[f]?1:-1:0})),n=t.slice(D*F,(D+1)*F);return D>0&&!n.length&&(n=t.slice((D-1)*F,F)),[n,e.length]}(),W=i()($,2),K=W[0],Z=W[1];return s.a.createElement(s.a.Fragment,null,s.a.createElement(Xe,{page:t,services:B,totalElement:Z,handleRequestModalOpen:r}),s.a.createElement(Ve,{page:t,serviceName:n,data:K,handleToggleActionClick:function(e){return function(e){T((function(t){return u()(t,a()({},e.serviceName,a()({},e.name,{__toggleShowSpinner:{$set:!0}})))}));var t=new URLSearchParams;t.append("disabled",!e.disabled),Object(v.a)({serviceName:"".concat(e.serviceName,"/").concat(e.name),body:t,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!0,callbackOnError:function(){T((function(t){return u()(t,a()({},e.serviceName,a()({},e.name,{__toggleShowSpinner:{$set:!1}})))}))}}).then((function(t){T((function(n){return u()(n,a()({},e.serviceName,a()({},e.name,{disabled:{$set:t.data.entry[0].content.disabled},__toggleShowSpinner:{$set:!1}})))}))}))}(e)},handleSort:function(e,t){var n=f===t.sortKey?O:"none";E("asc"===n?"desc":"asc"),h(t.sortKey)},sortDir:O,sortKey:f,handleOpenPageStyleDialog:o}))}Ye.propTypes={page:h.a.string,serviceName:h.a.string,handleRequestModalOpen:h.a.func,handleOpenPageStyleDialog:h.a.func};t.a=Object(l.memo)(Ye)},288:function(e,t,n){"use strict";var r=n(25),a=n.n(r),o=n(26),i=n.n(o),l=n(28),s=n.n(l),c=n(29),u=n.n(c),d=n(18),p=n.n(d),f=n(0),h=n.n(f),m=n(2),v=n.n(m),g=n(278),b=n.n(g),y=n(7),O=n(407),E=n.n(O),j=n(115),k=n.n(j),w=n(107),C=n.n(w),R={ERR0001:h.a.createElement(h.a.Fragment,null,"This is normal on Splunk search heads as they do not require an Input page. Check your installation or return to the ",h.a.createElement(C.a,{to:"configuration"},"configuration page"),"."),ERR0002:"Configuration page failed to load, the server reported internal errors which may indicate you do not have access to this page.",ERR0003:"Failed to load content due to no response from server!",ERR0004:"Failed to load content due to failed request processing!",ERR0005:"Failed to load current state for selected entity in form!"};function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p()(e);if(t){var a=p()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return u()(this,n)}}var x=function(e){s()(n,e);var t=S(n);function n(e){var r;return a()(this,n),(r=t.call(this,e)).state={errorCode:null,error:null,errorInfo:null},r}return i()(n,[{key:"componentDidCatch",value:function(e,t){this.setState({error:e,errorInfo:t})}},{key:"render",value:function(){var e;return this.state.error?h.a.createElement("div",{align:"center",style:{marginTop:"10%"}},h.a.createElement(E.a,{style:{boxShadow:"10px 10px 5px #aaaaaa"}},h.a.createElement(E.a.Header,null,h.a.createElement(b.a,{style:{textAlign:"center"},level:2},h.a.createElement(k.a,{style:{fontSize:"120px",color:"#ff9900"}}),h.a.createElement("br",null),h.a.createElement("br",null),"ERR0001"===this.state.errorCode?Object(y._)("Failed to load Inputs Page"):Object(y._)("Something went wrong!"))),h.a.createElement(E.a.Body,null,this.state.errorCode?h.a.createElement(h.a.Fragment,null,Object(y._)(R[this.state.errorCode]),h.a.createElement("br",null),h.a.createElement("br",null)):null,h.a.createElement("details",{style:{whiteSpace:"pre-wrap"}},null===(e=this.state.error)||void 0===e?void 0:e.toString())),h.a.createElement(E.a.Footer,{showBorder:!1},this.state.errorCode?this.state.errorCode:null))):this.props.children}}],[{key:"getDerivedStateFromError",value:function(e){return{errorCode:e.uccErrorCode}}}]),n}(h.a.Component);x.propTypes={children:v.a.oneOfType([v.a.arrayOf(v.a.node),v.a.node]).isRequired};t.a=x}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,