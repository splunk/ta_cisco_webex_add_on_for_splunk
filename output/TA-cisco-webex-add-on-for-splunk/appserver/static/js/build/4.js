(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{413:function(e,t,n){"use strict";n.r(t);var a=n(226),r=n.n(a),c=n(57),l=n.n(c),o=n(13),i=n.n(o),s=n(0),u=n.n(s),m=n(5),p=n(238),d=n.n(p),f=n(27),b=n.n(f),g=n(40),h=n.n(g),v=n(232),y=n.n(v),O=n(1),E=n(279),j=n.n(E),C=n(7),N=n(8),S=n(36),w=n(251),P=n(229),R=n(230),k=n(39),I=n(280),x=n(25),_=n.n(x),L=n(26),z=n.n(L),q=n(106),D=n.n(q),T=n(28),B=n.n(T),M=n(29),A=n.n(M),U=n(18),F=n.n(U),J=n(2),V=n.n(J),G=n(30);function H(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=F()(e);if(t){var r=F()(this).constructor;n=Reflect.construct(a,arguments,r)}else n=a.apply(this,arguments);return A()(this,n)}}var K=function(e){B()(n,e);var t=H(n);function n(e){var a;return _()(this,n),a=t.call(this,e),r()(D()(a),"setValue",(function(e){a.props.handleChange(e)})),r()(D()(a),"loadCustomMenu",(function(){return new Promise((function(e){if("external"===a.props.type)import("".concat(Object(G.a)(),"/custom/").concat(a.props.fileName,".js")).then((function(t){var n=t.default;e(n)}));else{var t=Object(S.d)().meta.name;require(["app/".concat(t,"/js/build/custom/").concat(a.props.fileName)],(function(t){return e(t)}))}}))})),a.state={loading:!0},a.shouldRender=!0,a}return z()(n,[{key:"componentDidMount",value:function(){var e=this,t=Object(S.d)();this.setState({loading:!0}),this.loadCustomMenu().then((function(n){new n(t,e.el,e.setValue).render(),e.setState({loading:!1})}))}},{key:"shouldComponentUpdate",value:function(e,t){return!(t.loading||!this.shouldRender)&&(this.shouldRender=!1,!0)}},{key:"render",value:function(){var e=this;return u.a.createElement(u.a.Fragment,null,this.state.loading&&Object(C._)("Loading..."),u.a.createElement("span",{ref:function(t){e.el=t},style:{visibility:this.state.loading?"hidden":"visible"}}))}}]),n}(s.Component);K.propTypes={fileName:V.a.string.isRequired,type:V.a.string,handleChange:V.a.func};var Q=K,W=n(287),X=n(256),Y=n(288),Z=n(107),$=n.n(Z),ee=n(61),te=n.n(ee),ne=n(4),ae=n(259);function re(e){var t=e.handleRequestClose,n=e.serviceName,a=e.mode,r=e.stanzaName,c=e.formLabel,o=Object(s.useRef)(),i=Object(s.useState)(!1),m=l()(i,2),p=m[0],f=m[1],g=Object(C._)("Submit");a===R.c?g=Object(C._)("Add"):a===R.a?g=Object(C._)("Clone Input"):a===R.d&&(g=Object(C._)("Update"));var h={boxShadow:Object(ne.useSplunkTheme)().embossShadow,padding:"1%",backgroundColor:"white"};return u.a.createElement(d.a,{gutter:8},u.a.createElement(d.a.Row,{style:{padding:"5px 0px"}},u.a.createElement(d.a.Column,null,u.a.createElement(w.a,null,u.a.createElement($.a,{onClick:t},Object(C._)("Inputs"))," > ",Object(C._)(c)))),u.a.createElement(d.a.Row,null,u.a.createElement(d.a.Column,{span:2}),u.a.createElement(d.a.Column,{span:8,style:h},u.a.createElement(ae.a,{ref:o,page:k.b,serviceName:n,mode:a,stanzaName:r,handleFormSubmit:function(e,n){f(e),n&&t()}})),u.a.createElement(d.a.Column,{span:2})),u.a.createElement(d.a.Row,null,u.a.createElement(d.a.Column,{span:7}),u.a.createElement(d.a.Column,{span:3,style:{textAlign:"right"}},u.a.createElement(b.a,{appearance:"secondary",onClick:t,label:Object(C._)("Cancel"),disabled:p}),u.a.createElement(b.a,{appearance:"primary",label:p?u.a.createElement(te.a,null):g,onClick:function(){o.current.handleSubmit()&&t()},disabled:p})),u.a.createElement(d.a.Column,{span:2})))}re.propTypes={handleRequestClose:V.a.func,serviceName:V.a.string,mode:V.a.string,stanzaName:V.a.string,formLabel:V.a.string};var ce,le=Object(s.memo)(re),oe=n(255);function ie(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function se(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ie(Object(n),!0).forEach((function(t){r()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ie(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ue=Object(O.default)(d.a.Row)(ce||(ce=i()(["\n    padding: 5px 0px;\n\n    .dropdown {\n        text-align: right;\n    }\n\n    .input_button {\n        text-align: right;\n        margin-right: 0px;\n    }\n"])));t.default=function(){var e=Object(s.useState)({open:!1}),t=l()(e,2),n=t[0],a=t[1],r=Object(S.d)().pages.inputs,c=r.services,o=r.title,i=r.description,p=r.menu,f=u.a.createElement(b.a,{appearance:"primary",id:"addInputBtn",label:Object(C._)("Create New Input"),isMenu:!0}),g=[R.a,R.c,R.d],v=Object(m.d)(),O=Object(oe.a)(),E=function(e,t){var r=c.find((function(t){return t.name===e})).style===I.b;a(se(se({},n),{},{open:!0,serviceName:e,mode:R.c,formLabel:"Add ".concat(t),isInputPageStyle:r})),r&&(O.set("service",e),O.set("action",R.c),v.push({search:O.toString()}))},x=function(){a(se(se({},n),{},{open:!1}))},_=function(){a(se(se({},n),{},{open:!1})),O.delete("service"),O.delete("action"),v.push({search:O.toString()})};return Object(s.useEffect)((function(){var e=c.find((function(e){return e.name===O.get("service")}));O&&e&&g.includes(O.get("action"))&&!n.open?O.get("action")!==R.c&&n.stanzaName?a(se(se({},n),{},{open:!0,isInputPageStyle:!0,serviceName:O.get("service"),mode:O.get("action")})):a(se(se({},n),{},{open:!0,isInputPageStyle:!0,serviceName:O.get("service"),formLabel:"Create ".concat(null==e?void 0:e.title),mode:R.c})):O.get("service")&&O.get("action")||!n.open||!n.isInputPageStyle||a(se(se({},n),{},{open:!1}))}),[v.location.search]),u.a.createElement(Y.a,null,u.a.createElement(P.a,{value:null},n.isInputPageStyle&&n.open?u.a.createElement(le,{open:n.open,handleRequestClose:_,serviceName:n.serviceName,stanzaName:n.stanzaName,mode:n.mode,formLabel:n.formLabel}):null," ",u.a.createElement("div",{style:n.isInputPageStyle&&n.open?{display:"none"}:{display:"block"}},u.a.createElement(d.a,{gutter:8},u.a.createElement(ue,null,u.a.createElement(d.a.Column,{span:9},u.a.createElement(w.b,null,Object(C._)(o)),u.a.createElement(w.a,null,Object(C._)(i))),c&&c.length>1&&!(null!=p&&p.src)&&u.a.createElement(d.a.Column,{className:"dropdown",span:3},u.a.createElement(h.a,{toggle:f},u.a.createElement(y.a,{onClick:function(e){var t=c[c.findIndex((function(t){return t.title===e.target.innerText}))].name;E(t,e.target.innerText)}},c.map((function(e){return u.a.createElement(y.a.Item,{key:e.name},e.title)}))))),c&&1===c.length&&!(null!=p&&p.src)&&u.a.createElement(d.a.Column,{span:3,className:"input_button"},u.a.createElement(b.a,{label:Object(N.a)(100),appearance:"primary",id:"addInputBtn",onClick:function(){E(c[0].name,c[0].title)}})),(null==p?void 0:p.src)&&u.a.createElement(d.a.Column,{span:3,className:"input_button"},u.a.createElement(Q,{fileName:p.src,type:p.type,handleChange:function(e){Object.keys(e).forEach((function(t){O.set(t,e[t])})),v.push({search:O.toString()})}})))),u.a.createElement(W.a,{page:k.b,handleOpenPageStyleDialog:function(e,t){var r,l=null===(r=c.find((function(t){return t.name===e.serviceName})))||void 0===r?void 0:r.title;a(se(se({},n),{},{open:!0,isInputPageStyle:!0,serviceName:e.serviceName,stanzaName:e.name,formLabel:t===R.a?"Clone ".concat(l):"Update ".concat(l),mode:t})),O.set("service",e.serviceName),O.set("action",t),v.push({search:O.toString()})}}),u.a.createElement(j.a,{position:"top-right"}),!n.isInputPageStyle&&n.open?u.a.createElement(X.a,{page:k.b,open:n.open,handleRequestClose:x,serviceName:n.serviceName,mode:R.c,formLabel:n.formLabel}):null)))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,